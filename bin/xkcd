#!/usr/bin/env ruby

require 'bundler'
Bundler.require
Dotenv.load

$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../lib"

require 'freefeed/api'
require 'xkcd_feed'
require 'logger'
require 'tempfile'

logger = Logger.new($stdout)
db = Sequel.connect('sqlite://feeds.sqlite', loggers: [logger])

# db.drop_table(:posts) if db.table_exists?(:posts)

db.table_exists?(:posts) || db.create_table(:posts) do
  primary_key :id

  String :title
  String :link, unique: true
  String :description
  DateTime :pub_date
  String :guid
  String :extra

  DateTime :created_at, default: Time.now.utc
  String :freefeed_post_id

  index :link
end

class Post < Sequel::Model(:posts)
  set_primary_key :id
end

XkcdFeed.recent.each do |item|
  ap Post.create(item) if Post.where(link: item[:link]).count.zero?
end

api = Freefeed::API.new(ENV['FREEFEED_TOKEN'])

Post.where(freefeed_post_id: nil).order(:pub_date).each do |post|
  logger.info "---> Post GUID: #{post.guid}"

  image = JSON.parse(post.extra)
  logger.info "---> create new attachment for #{image['image_url']}"
  re = api.create_attachment_from_url(image['image_url'])
  attach_id = re['attachments']['id']
  logger.info "attachment id: #{attach_id}"

  logger.info '---> create new post'
  re = api.create_post("#{post.title} - #{post.link}",
    feeds: [ENV['XKCD_GROUP']], attachments: [attach_id])
  post_id = re['posts']['id']
  logger.info "post id: #{post_id}"
  post.update(freefeed_post_id: post_id)

  logger.info '---> create comment'
  api.create_comment(post_id, image['image_description'])
end
